#!/usr/bin/env bash
# -*- TT -*-

[% INCLUDE ErrorHandling.tt %]
[% INCLUDE Logging.tt job_name="GermlineAnnotation" main_step=final_vcf log_name="${opt.RUN_NAME}.log" %]

[%- pre_annotated_vcf = input_vcf -%]

cd "[% dirs.out %]"

start_step "ANNOTATE_SNPEFF"

assert_not_empty "[% input_vcf %]"
[%- output_vcf = input_vcf.replace('\.vcf$', '_snpEff.vcf') %]
rm -f "[% output_vcf %]" "[% output_vcf %].idx"

java -Xmx[% opt.ANNOTATE_MEM %]G \
    -Djava.io.tmpdir=[% dirs.tmp %] \
    -jar [% opt.SNPEFF_PATH %]/snpEff.jar \
    -c [% opt.SNPEFF_PATH %]/snpEff.config \
    [% opt.ANNOTATE_DB %] \
    -v "[% input_vcf %]" \
    [% opt.ANNOTATE_FLAGS %] \
    > "[% output_vcf %]"

[% opt.IGVTOOLS_PATH %]/igvtools index "[% output_vcf %]"
rm igv.log

[%- input_vcf = output_vcf %]
finish_step


start_step "ANNOTATE_SNPSIFT"

assert_not_empty "[% input_vcf %]"
[%- output_vcf = input_vcf.replace('\.vcf$', '_snpSift.vcf') %]
rm -f "[% output_vcf %]" "[% output_vcf %].idx"

java -Xmx[% opt.ANNOTATE_MEM %]G \
    -Djava.io.tmpdir=[% dirs.tmp %] \
    -jar [% opt.SNPEFF_PATH %]/SnpSift.jar \
    dbnsfp \
    -v \
    -f [% opt.ANNOTATE_FIELDS %] \
    -db [% opt.ANNOTATE_DBNSFP %] \
    "[% input_vcf %]" \
    > "[% output_vcf %]"

[% opt.IGVTOOLS_PATH %]/igvtools index "[% output_vcf %]"
rm igv.log

if [ -s "[% output_vcf %]" ]
then
    rm "[% input_vcf %]" "[% input_vcf %].idx"
fi

[%- input_vcf = output_vcf %]
finish_step


start_step "ANNOTATE_IDFIELD"

assert_not_empty "[% input_vcf %]"
[%- suffix = '_' _ opt.ANNOTATE_IDNAME _ '.vcf' -%]
[%- output_vcf = input_vcf.replace('\.vcf$', suffix) %]
rm -f "[% output_vcf %]" "[% output_vcf %].idx"

java -Xmx[% opt.ANNOTATE_MEM %]G \
    -Djava.io.tmpdir=[% dirs.tmp %] \
    -jar [% opt.GATK_PATH %]/GenomeAnalysisTK.jar \
    -T VariantAnnotator \
    -nt [% opt.ANNOTATE_THREADS %] \
    -R [% opt.REF_GENOME %] \
    -o "[% output_vcf %]" \
    --variant "[% input_vcf %]" \
    --dbsnp [% opt.ANNOTATE_IDDB %] \
    --alwaysAppendDbsnpId

if [ -s "[% output_vcf %]" ]
then
    rm "[% input_vcf %]" "[% input_vcf %].idx"
fi

[%- input_vcf = output_vcf %]
finish_step


start_step "ANNOTATE_FREQUENCIES"

assert_not_empty "[% input_vcf %]"
[%- suffix = '_' _ opt.ANNOTATE_FREQNAME _ '.vcf' -%]
[%- output_vcf = input_vcf.replace('\.vcf$', suffix) %]
rm -f "[% output_vcf %]" "[% output_vcf %].idx"

java -Xmx[% opt.ANNOTATE_MEM %]G \
    -Djava.io.tmpdir=[% dirs.tmp %] \
    -jar [% opt.SNPEFF_PATH %]/SnpSift.jar \
    annotate \
    -tabix \
    -name [% opt.ANNOTATE_FREQNAME %]_ \
    -info [% opt.ANNOTATE_FREQINFO %] \
    [% opt.ANNOTATE_FREQDB %] \
    "[% input_vcf %]" \
    > "[% output_vcf %]"

[% opt.IGVTOOLS_PATH %]/igvtools index "[% output_vcf %]"
rm igv.log

if [ -s "[% output_vcf %]" ]
then
    rm "[% input_vcf %]" "[% input_vcf %].idx"
fi

[%- input_vcf = output_vcf %]
finish_step

assert_last_position_unchanged "[% pre_annotated_vcf %]" "[% output_vcf %]"
mv "[% output_vcf %]" "[% final_vcf %]"
mv "[% output_vcf %].idx" "[% final_vcf %].idx"
success
