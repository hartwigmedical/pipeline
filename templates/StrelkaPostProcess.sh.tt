#!/usr/bin/env bash
# -*- TT -*-

[% INCLUDE ErrorHandling.tt %]
[% INCLUDE Logging.tt job_name="SomaticAnnotation" main_step=joint_name log_name="Somatic_${joint_name}.log" %]

input_vcf="[% strelka_vcf %].vcf"
filtered_vcf="[% dirs.out %].filtered.vcf"
rm -f "filtered_vcf" "filtered_vcf.idx"

java -jar "[% opt.STRELKA_POST_PROCESS_PATH %]/strelka-post-process.jar" \
    -v "[% input_vcf %]" \
    -hc_bed "[% opt.HIGH_CONFIDENCE_BED %]" \
    -t "[% tumor_sample %]" \
    -o "[% filtered_vcf %].tmp"

cd "[% dirs.out %]"

assert_not_empty "$filtered_vcf"
output_vcf="[% dirs.out %].snpEff.vcf"
rm -f "$output_vcf" "$output_vcf.idx"

java -Xmx[% opt.STRELKAPOSTPROCESS_MEM %]G \
    -Djava.io.tmpdir=[% dirs.tmp %] \
    -jar "[% opt.SNPEFF_PATH %]/snpEff.jar" \
    -c "[% opt.SNPEFF_PATH %]/snpEff.config" \
    "[% opt.ANNOTATE_DB %]" \
    -v "$filtered_vcf" \
    [% opt.ANNOTATE_FLAGS %] \
    > "$output_vcf"

assert_not_empty "$output_vcf"
input_vcf="$output_vcf"
output_vcf="[% dirs.out %].dbsnp.vcf"
rm -f "$output_vcf" "$output_vcf.idx"

java -Xmx[% opt.STRELKAPOSTPROCESS_MEM %]G \
    -Djava.io.tmpdir=[% dirs.tmp %] \
    -jar "[% opt.GATK_PATH %]/GenomeAnalysisTK.jar" \
    -T VariantAnnotator \
    -nt [% opt.STRELKAPOSTPROCESS_THREADS %] \
    -R "[% opt.GENOME %]" \
    -o "$output_vcf" \
    --variant "$input_vcf" \
    --dbsnp "[% opt.CALLING_DBSNP %]" \
    --alwaysAppendDbsnpId

assert_not_empty "$output_vcf"
rm "$input_vcf" "$input_vcf.idx"
input_vcf="$output_vcf"
output_vcf="[% dirs.out %].[% opt.ANNOTATE_IDNAME %].vcf"
rm -f "$output_vcf" "$output_vcf.idx"

java -Xmx[% opt.STRELKAPOSTPROCESS_MEM %]G \
    -Djava.io.tmpdir=[% dirs.tmp %] \
    -jar "[% opt.GATK_PATH %]/GenomeAnalysisTK.jar" \
    -T VariantAnnotator \
    -nt [% opt.STRELKAPOSTPROCESS_THREADS %] \
    -R "[% opt.GENOME %]" \
    -o "$output_vcf" \
    --variant "$input_vcf" \
    --dbsnp "[% opt.ANNOTATE_IDDB %]" \
    --alwaysAppendDbsnpId

assert_not_empty "$output_vcf"
rm "$input_vcf" "$input_vcf.idx"
input_vcf="$output_vcf"
output_vcf="[% dirs.out %].pon.vcf"
rm -f "$output_vcf" "$output_vcf.idx"

[% opt.OUTPUT_DIR %]/scripts/annotatePON.py -p "[% opt.HMF_PON %]" -i "[% input_vcf %]" -o - | \
[% opt.BCFTOOLS_PATH %]/bcftools filter -e 'PON_COUNT!="." && MIN(PON_COUNT) > 5' -s PON -m+ -o "[% output_vcf %]"
[% opt.IGVTOOLS_PATH %]/igvtools index "[% output_vcf %]"

assert_last_position_unchanged "[% input_vcf %]" "[% output_vcf %]"
rm "$input_vcf" "$input_vcf.idx"

mv "$output_vcf" "[% final_vcf %]"
mv "$output_vcf.idx" "[% final_vcf %].idx"
success