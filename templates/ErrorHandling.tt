# SABR: note: http://mywiki.wooledge.org/BashFAQ/105

set -o errtrace
set -o pipefail
set -o nounset
set -o errexit

function handle_error() {
    local ret=$1 && shift
    local lineno=$1 && shift
    local command=$1 && shift

    echo "$(date) $(hostname) $0: line $lineno: $command: exit code $ret" >> "[% opt.OUTPUT_DIR %]/logs/unhandled_job_errors"
    exit 100
}

trap 'handle_error $? $LINENO "$BASH_COMMAND"' ERR

PIPE_DIR="$(mktemp -d)"
function pipe() {
    local pipe_file
    pipe_file="$PIPE_DIR/$(basename "$(mktemp -u)")"
    mkfifo -m 600 "$pipe_file"
    echo "$pipe_file"
}

function cleanup() {
    rm -rf "$PIPE_DIR"
}

trap 'cleanup' EXIT

function fail() {
    echo -e "ERROR: $*" >&2
    exit 100
}

function assert_not_empty() {
    local target_path
    for target_path in "$@"
    do
        [ -s "${target_path}" ] || failure "${target_path} does not exist or is empty."
    done
}

function assert_exists() {
    local target_path
    for target_path in "$@"
    do
        [ -f "${target_path}" ] || failure "${target_path} does not exist."
    done
}

function assert_last_position_unchanged() {
    local input_path=$1 && shift
    local output_path=$1 && shift

    assert_not_empty "${input_path}" "${output_path}"
    local input_tail output_tail
    input_tail="$(tail -n 1 "${input_path}" | cut -f 1,2)"
    output_tail="$(tail -n 1 "${output_path}" | cut -f 1,2)"
    if [[  "$input_path" =~ gz$ ]]; then input_tail="$( zcat "${input_path}" | tail -n 1 | cut -f 1,2)"; fi
    if [[ "$output_path" =~ gz$ ]]; then output_tail="$( zcat "${output_path}" | tail -n 1 | cut -f 1,2)"; fi
    [ "$input_tail" == "$output_tail" ] || 
      failure "last position in ${output_path} ($output_tail) differs from ${input_path} ($input_tail)"
}

function assert_no_genomic_positions_lost() {
    bcftools=[% opt.BCFTOOLS_PATH %]/bcftools
    local vcf1_path=$1 && shift
    local vcf2_path=$1 && shift
    
    #echo "[INFO] About to compare genomic pos of ${vcf1_path} vs ${vcf2_path}"
    assert_not_empty "${vcf1_path}" "${vcf2_path}"
    
    local unique_in_vcf1
    unique_in_vcf1=$( ${bcftools} stats "${vcf1_path}" "${vcf2_path}" | grep -v "#" | grep "number of records" | awk '$2 == 0' | cut -f4 | head -1 )
    [ "${unique_in_vcf1}" -eq 0 ] || failure "there are genomic positions in ${vcf1_path} that are not in ${vcf2_path}."
}
