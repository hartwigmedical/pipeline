#!/usr/bin/env bash
# -*- TT -*-

[% INCLUDE ErrorHandling.tt mode=opt.JOB_ERROR_MODE %]
[% INCLUDE Logging.tt job_name="Delly" main_step=step log_name="Delly_${step}.log" %]

export OMP_NUM_THREADS
OMP_NUM_THREADS=[% opt.DELLY_THREADS %]

[% opt.DELLY_PATH %]/delly call \
    -t [% type %] \
    -g "[% opt.GENOME %]" \
    [%- TRY %]
    [%- IF exclude_file.defined %]
    -x "[% exclude_file %]" \
    [%- END -%]
    [%- CATCH var.undef -%]
    [%- END %]
    -q [% opt.DELLY_MAPQUAL %] \
    -s [% opt.DELLY_MAD %] \
    -u [% opt.DELLY_GENO_QUAL %] \
    [%- IF opt.exists('DELLY_VCF_GENO') %]
    -v [% opt.DELLY_VCF_GENO %] \
    [%- END %]
    -o "[% output_vcf %].bcf" \
    "[% sample_bams.values.join('" "') %]"

final_log_line=$(tail -n1 "$SGE_STDOUT_PATH")
[ "${final_log_line%Done.}" != "${final_log_line}" ] || failure "Delly final log line is $final_log_line"

# output VCF will not exist if no variants are found; make minimal valid VCF
if [ -s "[% output_vcf %].bcf" ]
then
    [% opt.BCFTOOLS_PATH %]/bcftools view "[% output_vcf %].bcf" > "[% output_vcf %]"
    rm "[% output_vcf %].bcf"
else
    echo -e "#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\tFORMAT\t[% sample_bams.keys.join('\t') %]" > "[% output_vcf %]"
fi

# TRA format needs normalizing
if [ "[% type %]" == "TRA" ]
then
    [% opt.OUTPUT_DIR %]/scripts/convert_delly_TRA.pl "[% output_vcf %]" "[% output_vcf %].tmp"

    final_log_line=$(tail -n1 "$SGE_STDOUT_PATH")
    [ "$final_log_line" == "Done." ] || failure "TRA conversion final log line is $final_log_line"

    mv "[% output_vcf %].tmp" "[% output_vcf %]"
fi

success
