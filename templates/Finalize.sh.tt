#!/usr/bin/env bash
# -*- TT -*-
#
# Template used by the Template Toolkit. See: http://template-toolkit.org/
#

[% INCLUDE ErrorHandling.tt mode=opt.JOB_ERROR_MODE %]

export JOB_NAME JOB_SET JOB_START
JOB_NAME=Finalize
JOB_SET="[% opt.RUN_NAME %]"
JOB_START=$(date +%s)

[% INCLUDE Status.tt step="" status="processing" %]

function check_step() {
    local subdir="$1" && shift
    local suffix="${1:+_$1}" && shift
    local new_step_name="$1" && shift
    local old_step_names="$*"

    local indent=""
    { [ -n "${suffix}" ] || [ "${subdir}" != "." ]; } && indent=$'\t'

    local step_name
    for step_name in ${new_step_name} ${old_step_names}
    do
        local done_file="[% opt.OUTPUT_DIR %]/${subdir}/logs/${step_name}${suffix}.done"
        if [ -f "${done_file}" ]
        then
            echo "${indent}${new_step_name}: done" >> [% log_file %]
            return
        fi
    done
    echo "${indent}${new_step_name}: failed" >> [% log_file %]
    failed=true
}


failed=false
rm -f [% log_file %]

echo "Check and cleanup for run: [% opt.RUN_NAME %]" >> [% log_file %]
echo "Pipeline version: [% opt.VERSION %]" >> [% log_file %]
echo >> [% log_file %]

[% FOREACH sample IN opt.SAMPLES.keys -%]
echo "Sample: [% sample %]" >> [% log_file %]
[% IF opt.PRESTATS == "yes" -%]
check_step "[% sample %]" "[% sample %]" "PreStats"
[% END -%]
[% IF opt.MAPPING == "yes" -%]
check_step "[% sample %]" "[% sample %]" "Mapping"
[% END -%]
[% IF opt.INDELREALIGNMENT == "yes" -%]
check_step "[% sample %]" "[% sample %]" "Realignment"
[% END -%]
[% IF opt.BASEQUALITYRECAL == "yes" -%]
check_step "[% sample %]" "[% sample %]" "BaseRecalibration"
[% END -%]
[% IF opt.BAF == "yes" -%]
check_step "[% sample %]" "[% sample %]" "BAF"
[% END -%]
[% IF opt.CALLABLE_LOCI == "yes" -%]
check_step "[% sample %]" "[% sample %]" "CallableLoci"
[% END -%]
echo >> [% log_file %]
[% END -%]

[% IF opt.POSTSTATS == "yes" -%]
check_step "." "" "PostStats"
[% END -%]
[% IF opt.VARIANT_CALLING == "yes" -%]
check_step "." "" "GermlineCaller" "VariantCaller"
[% END -%]
[% IF opt.FILTER_VARIANTS == "yes" -%]
check_step "." "" "GermlineFilter" "VariantFilter"
[% END -%]
[% IF opt.ANNOTATE_VARIANTS == "yes" -%]
check_step "." "" "GermlineAnnotation" "VariantAnnotation"
[% END -%]

[% IF opt.SOMATIC_VARIANTS == "yes" -%]
echo "Somatic variants:" >> [% log_file %]
check_step "somaticVariants/[% joint_name %]" "" "[% joint_name %]"
[% END -%]

[% IF opt.COPY_NUMBER == "yes" -%]
echo "Copy number analysis:" >> [% log_file %]
[% IF opt.CNV_MODE == "sample_control" -%]
check_step "copyNumber/[% joint_name %]" "" "[% joint_name %]"
[% ELSIF opt.CNV_MODE == "sample" -%]
[% FOREACH sample IN opt.SAMPLES.keys -%]
check_step "copyNumber/[% sample %]" "" "[% sample %]"
[% END -%]
[% END -%]
[% END -%]

[% IF opt.KINSHIP == "yes" -%]
check_step "." "" Kinship
[% END -%]

echo >> [% log_file %]


if [[ "${failed}" == "true" ]]
then
    echo "One or multiple step(s) of the pipeline failed." >> [% log_file %]
    mail -s "Pipeline FAILED [% opt.RUN_NAME %]" "[% opt.MAIL %]" < [% log_file %]
    [% INCLUDE Status.tt step="" status="failed" %]
else
    echo "The pipeline completed successfully." >> [% log_file %]
    rm -rf [% opt.OUTPUT_DIR %]/tmp
    rm -rf [% opt.OUTPUT_DIR %]/*/tmp
    find [% opt.OUTPUT_DIR %]/logs -size 0 -not -name "*.done" -delete
    find [% opt.OUTPUT_DIR %]/*/logs -size 0 -not -name "*.done" -delete
[% IF opt.SOMATIC_VARIANTS == "yes" -%]
    find [% opt.OUTPUT_DIR %]/somaticVariants/*/logs -size 0 -not -name "*.done" -delete
[% END -%]

[% IF opt.INDELREALIGNMENT == "yes" -%]
[% FOREACH sample IN opt.SAMPLES.keys -%]
    rm -f [% opt.OUTPUT_DIR %]/[% sample %]/mapping/[% sample %]_dedup.ba*
[% END -%]
[% END -%]

[% IF opt.BASEQUALITYRECAL == "yes" -%]
[% FOREACH sample IN opt.SAMPLES.keys -%]
    rm -f [% opt.OUTPUT_DIR %]/[% sample %]/mapping/[% sample %]_dedup.recalibrated.ba*
[% END -%]
[% END -%]

[% IF opt.BASEQUALITYRECAL == "yes" -%]
[% FOREACH sample IN opt.SAMPLES.keys -%]
    rm -f [% opt.OUTPUT_DIR %]/[% sample %]/mapping/[% sample %]_dedup.recalibrated.ba*
[% END -%]
[% END -%]

[% IF opt.SOMATIC_VARIANTS == "yes" && opt.SOMVAR_VARSCAN == "yes" && opt.FINALIZE_KEEP_PILEUP == "no" -%]
[% FOREACH sample IN opt.SAMPLES.keys -%]
    rm -f [% opt.OUTPUT_DIR %]/[% sample %]/mapping/[% sample %]*.pileup.gz
    rm -f [% opt.OUTPUT_DIR %]/[% sample %]/mapping/[% sample %]*.pileup.gz.tbi
[% END -%]
[% END -%]

    mail -s "Pipeline DONE [% opt.RUN_NAME %]" "[% opt.MAIL %]" < [% log_file %]
    touch "[% opt.OUTPUT_DIR %]/logs/PipelineCheck.done"
    [% INCLUDE Status.tt step="" status="success" %]
fi

# regardless of success, remove the lock: we are done
rm -f [% opt.OUTPUT_DIR %]/run.lock

