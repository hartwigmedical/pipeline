#!/usr/bin/env bash
# -*- TT -*-

[% INCLUDE ErrorHandling.tt %]
[% INCLUDE Logging.tt job_name="StrelkaPostProcess" main_step=joint_name log_name="Somatic_${joint_name}.log" %]

cd "[% dirs.out %]"

basefile=[% dirs.out %]/[% joint_name %]
tmp_file_suffix="tmpFileToBeDeleted"
tumor_bam="[% tumor_bam_path %]"
input_vcf="[% strelka_vcf %]"

assert_not_empty "${input_vcf}"
assert_not_empty "${tumor_bam}"

## ===== MAPPABILITY ANNOTATION
echo "[INFO] Annotating Mappability - $(date)"

output_vcf="${basefile}_${tmp_file_suffix}.mappability.vcf.gz"
[% opt.BCFTOOLS_PATH %]/bcftools annotate -a "[% opt.MAPPABILITY_BED %]" -h "[% opt.MAPPABILITY_HDR %]" -c CHROM,FROM,TO,-,MAPPABILITY -o ${output_vcf} -O z ${input_vcf}
[% opt.TABIX_PATH %]/tabix ${output_vcf} -p vcf

assert_no_genomic_positions_lost "$input_vcf" "$output_vcf"

## ===== GERMLINE PON ANNOTATION
echo "[INFO] Annotating Germline PON - $(date)"

input_vcf="$output_vcf"
output_vcf="${basefile}_${tmp_file_suffix}.germlinepon.vcf.gz"

[% opt.BCFTOOLS_PATH %]/bcftools annotate -a "[% opt.HMF_GERMLINE_PON %]" -c GERMLINE_PON_COUNT -o ${output_vcf} -O z ${input_vcf}
[% opt.TABIX_PATH %]/tabix ${output_vcf} -p vcf

assert_no_genomic_positions_lost "$input_vcf" "$output_vcf"

## ===== SOMATIC PON ANNOTATION
echo "[INFO] Annotating Somatic PON - $(date)"

input_vcf="$output_vcf"
output_vcf="${basefile}_${tmp_file_suffix}".sompon.vcf.gz

[% opt.BCFTOOLS_PATH %]/bcftools annotate -a "[% opt.HMF_SOMATIC_PON %]" -c SOMATIC_PON_COUNT -o ${output_vcf} -O z ${input_vcf}
[% opt.TABIX_PATH %]/tabix ${output_vcf} -p vcf

assert_no_genomic_positions_lost "$input_vcf" "$output_vcf"

## ===== STRELKA POST PROCESS
echo "[INFO] Running hmftool strelka-post-process - $(date)"
input_vcf="$output_vcf"
output_vcf="${basefile}_${tmp_file_suffix}".filtered.vcf.gz

input_vcf_uncompressed="${input_vcf%.*}"
gunzip -c ${input_vcf} > ${input_vcf_uncompressed}

java -Xmx[% opt.STRELKAPOSTPROCESS_MEM %]G \
    -jar "[% opt.STRELKA_POST_PROCESS_PATH %]/strelka-post-process.jar" \
    -v "$input_vcf_uncompressed" \
    -hc_bed "[% opt.HIGH_CONFIDENCE_BED %]" \
    -t "[% tumor_sample %]" \
    -o "$output_vcf" \
    -b $tumor_bam

## ===== SNPEFF ANNOTATION
echo "[INFO] Annotating with snpEff - $(date)"

input_vcf="$output_vcf"
output_vcf="${basefile}_${tmp_file_suffix}.snpEff.vcf"

java -Xmx[% opt.STRELKAPOSTPROCESS_MEM %]G \
    -Djava.io.tmpdir=[% dirs.tmp %] \
    -jar "[% opt.SNPEFF_PATH %]/snpEff.jar" \
    -c "[% opt.SNPEFF_PATH %]/snpEff.config" "[% opt.ANNOTATE_SNPEFF_DB %]" \
    -v "$input_vcf" \
    [% opt.ANNOTATE_SNPEFF_FLAGS %] \
    > "$output_vcf"

assert_last_position_unchanged "$input_vcf" "$output_vcf"

## ===== ZIP AND TABIX INDEX
echo "[INFO] Bgzip and create tabix index - $(date)"
[% opt.TABIX_PATH %]/bgzip -f ${output_vcf}
input_vcf=${output_vcf}.gz

[% opt.TABIX_PATH %]/tabix -p vcf ${input_vcf}

## ===== DBSNP ANNOTATION
echo "[INFO] Annotating DBSNP - $(date)"

output_vcf="${basefile}_${tmp_file_suffix}.dbsnp.vcf.gz"

[% opt.BCFTOOLS_PATH %]/bcftools annotate -a [% opt.DBSNP_DB %] -c ID -o ${output_vcf} -O z ${input_vcf}
[% opt.TABIX_PATH %]/tabix -p vcf ${output_vcf}

assert_no_genomic_positions_lost "$input_vcf" "$output_vcf"

## ===== COSMIC ANNOTATION
echo "[INFO] Annotating COSMIC - $(date)"

input_vcf="$output_vcf"
output_vcf="${basefile}_${tmp_file_suffix}.[% opt.ANNOTATE_COSMIC_ID %].vcf.gz"

[% opt.BCFTOOLS_PATH %]/bcftools annotate -a [% opt.ANNOTATE_COSMIC_DB %] -c =ID -o ${output_vcf} -O z ${input_vcf}
[% opt.TABIX_PATH %]/tabix ${output_vcf} -p vcf

assert_no_genomic_positions_lost "$input_vcf" "$output_vcf"

## ===== APPLICATION OF PON FILTERING
echo "[INFO] Applying PON Filters - $(date)"

input_vcf="$output_vcf"
output_vcf="${basefile}_${tmp_file_suffix}.pon.vcf.gz"

[% opt.BCFTOOLS_PATH %]/bcftools filter -e 'GERMLINE_PON_COUNT!="." && MIN(GERMLINE_PON_COUNT) > 5' -s GERMLINE_PON -m+ ${input_vcf} -O u | \
[% opt.BCFTOOLS_PATH %]/bcftools filter -e 'SOMATIC_PON_COUNT!="." && MIN(SOMATIC_PON_COUNT) > 3' -s SOMATIC_PON -m+ -O z -o ${output_vcf}
[% opt.TABIX_PATH %]/tabix -p vcf ${output_vcf}

assert_no_genomic_positions_lost "$input_vcf" "$output_vcf"

## ===== FINAL CLEAN UP
echo "[INFO] Renaming to final and cleanup - $(date)"
mv "$output_vcf" "[% final_vcf %]"
mv "$output_vcf.tbi" "[% final_vcf %].tbi"

rm ./*${tmp_file_suffix}*

echo "[INFO] Cleaning up recalibrated bams - $(date)"
[% FOREACH sample IN opt.SAMPLES.keys -%]
rm -f [% opt.OUTPUT_DIR %]/[% sample %]/mapping/[% sample %]*.recalibrated.ba*
[% END -%]

success
