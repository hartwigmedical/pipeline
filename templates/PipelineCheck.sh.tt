#!/usr/bin/env bash
# -*- TT -*-

[% INCLUDE ErrorHandling.tt %]
[% INCLUDE Logging.tt job_name="PipelineCheck" main_step="" log_name="${opt.RUN_NAME}.log" %]

succeed=true
rm -f [% log_file %]

echo "Check and cleanup for run: [% opt.RUN_NAME %]" >> [% log_file %]
echo "Pipeline version: [% opt.VERSION %]" >> [% log_file %]
echo >> [% log_file %]

[%- FOREACH done_file IN done_files %]
echo -n "$(basename "[% done_file %]"): " >> [% log_file %]
if [[ -f "[% done_file %]" ]]
then
    echo "succeeded" >> [% log_file %]
else
    echo "failed" >> [% log_file %]
    succeed=false
fi
[% END -%]

echo >> [% log_file %]

coreDumpFiles=$(find "[% opt.OUTPUT_DIR %]" -type f -name "core.*" 2>/dev/null)
echo -n "CoreDumpCheck: " >> [% log_file %]
if [[ -z "${coreDumpFiles}" ]]
then
    echo "succeeded" >> [% log_file %]
else
    echo "failed" >> [% log_file %]
    succeed=false
fi

unhandledErrorLog="[% opt.OUTPUT_DIR %]"/logs/unhandled_job_errors
echo -n "UnhandledErrorsCheck: " >> [% log_file %]
if [[ ! -s "${unhandledErrorLog}" ]]
then
    echo "succeeded" >> [% log_file %]
else
    echo "failed" >> [% log_file %]
    succeed=false
fi

submitErrorLogs=$(find "[% opt.OUTPUT_DIR %]/logs" -maxdepth 1 -type f -name "submitlog*.err")

submitlogSucceed=true
for submitErrorLog in ${submitErrorLogs}; do
    if [[ -s "${submitErrorLog}" ]]; then
        ${submitlogSucceed}=false
    fi
done

echo -n "SubmitlogErrorsCheck: " >> [% log_file %]
if [[ "${submitlogSucceed}" == "true" ]]
then
    echo "succeeded" >> [% log_file %]
else
    echo "failed" >> [% log_file %]
    succeed=false
fi

echo >> [% log_file %]

[%- IF opt.HEALTHCHECK == "yes" %]
# TODO (KODU): Actually check for PASS/FAIL in the evaluation output log.
healthCheckOutputLog="[% opt.OUTPUT_DIR %]"/logs/HealthCheckEvaluation.out

healthCheckSucceed=true
if [[ -s "${healthCheckOutputLog}" ]]; then
    ${healthCheckSucceed}=false
fi

echo -n "HealthCheck: " >> [% log_file %]
if [[ "${healthCheckSucceed}" == "true" ]]
then
    echo "succeeded" >> [% log_file %]
else
    echo "failed" >> [% log_file %]
    succeed=false
fi

echo >> [% log_file %]

[%- END %]

if [[ "${succeed}" == "true" ]]
then
    echo "Pipeline Status = SUCCESS" >> [% log_file %]

    find [% opt.OUTPUT_DIR %] -type d -name tmp -prune -exec rm -rf "{}" \;
    find [% opt.OUTPUT_DIR %]/*/logs -size 0 -not -name "*.done" -delete
    find [% dirs.log %] -size 0 -not -name "*.done" -delete
else
    echo "Pipeline Status = FAIL" >> [% log_file %]
fi

rm -f [% opt.OUTPUT_DIR %]/run.lock

# SABR: don't touch done file; it should always run
success_no_done
