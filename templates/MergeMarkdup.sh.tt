#!/usr/bin/env bash
# -*- TT -*-
#
# Template used by the Template Toolkit. See: http://template-toolkit.org/
#

[% INCLUDE ErrorHandling.tt mode=opt.JOB_ERROR_MODE %]

export JOB_NAME=MergeMarkdup
export JOB_SET="[% run_name %]"
export JOB_START=$(date +%s)

cd [% opt.OUTPUT_DIR %]/[% sample %]

[% INCLUDE Status.tt step=sample status="processing" %]

echo "Start merge 	" `date` "	[% sample %]	" `uname -n` >> logs/[% sample %].log

bam_errors=""
for bam_file in [% bams %]; do
    done_file=$(echo $bam_file | sed -r 's/(_sorted)?(_dedup)?\.bam$/\.done/')
    if [ ! -f $done_file ]; then
        bam_errors+="$bam_file is probably incomplete, no $done_file found\n"
    fi
done

if [ -n "$bam_errors" ]; then
    [% INCLUDE Status.tt step=sample status="failed" %]
    fail "merging failed due to incomplete BAM-file(s):\n${bam_errors}"
else
    echo "Start markdup	" `date` "	[% sample %].bam	" `uname -n` >> logs/[% sample %].log

    ### Centos7 hpc: Use $TMPDIR as tmpdir variable.
    [% opt.SAMBAMBA_PATH %]/sambamba markdup --tmpdir=[% opt.OUTPUT_DIR %]/[% sample %]/tmp/ --overflow-list-size=[% opt.MARKDUP_OVERFLOW_LIST_SIZE %] -t [% opt.MARKDUP_THREADS %] [% bams %]  mapping/[% sample %]_dedup.tmp.bam
    [% opt.SAMBAMBA_PATH %]/sambamba index -t [% opt.MARKDUP_THREADS %] mapping/[% sample %]_dedup.tmp.bam mapping/[% sample %]_dedup.tmp.bai
    [% opt.SAMBAMBA_PATH %]/sambamba flagstat -t [% opt.MARKDUP_THREADS %] mapping/[% sample %]_dedup.tmp.bam > mapping/[% sample %]_dedup.flagstat

    echo "End markdup	" `date` "	[% sample %].bam	" `uname -n` >> logs/[% sample %].log

    [% INCLUDE Status.tt step=sample status="finished" %]
fi

export JOB_NAME=MergeMarkdupCleanup

[% INCLUDE Status.tt step=sample status="processing" %]
total_reads=$(find mapping -name '*_sorted.flagstat' -print0 | xargs -r0 awk '/d+/ { total += $1; nextfile } END { print total }')

if [ -s mapping/[% sample %]_dedup.flagstat ]; then
    dedup_reads=$(awk '/d+/ { print $1; exit }' "mapping/[% sample %]_dedup.flagstat")
    if [ $dedup_reads -eq $total_reads ]; then
        rm -f mapping/[% sample %].bam
        rm -f mapping/[% sample %].bai
        mv mapping/[% sample %]_dedup.tmp.bam mapping/[% sample %]_dedup.bam
        mv mapping/[% sample %]_dedup.tmp.bai mapping/[% sample %]_dedup.bai
        for bam_file in $(find mapping -name '*_sorted.bam'); do
            rm $bam_file
        done

        touch logs/Mapping_[% sample %].done
        [% INCLUDE Status.tt step=sample status="success" %]
    else
        [% INCLUDE Status.tt step=sample status="failed" %]
        fail "read counts from *_sorted.flagstat files and mapping/[% sample %]_dedup.flagstat do not match"
    fi
else
    [% INCLUDE Status.tt step=sample status="failed" %]
    fail "mapping/[% sample %]_dedup.flagstat is empty."
fi

echo "End merge 	" `date` "	[% sample %]	" `uname -n` >> logs/[% sample %].log
