#!/usr/bin/env bash
# -*- TT -*-

[% INCLUDE ErrorHandling.tt %]
[% INCLUDE Logging.tt job_name="GridssPreProcess" main_step=sample log_name="GridssPreProcess_${sample}.log" %]

jvm_args="-ea -Dsamjdk.create_index=true -Dsamjdk.use_async_io_read_samtools=true -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=true"

mkdir -p [% working_dir %]

echo "[INFO] Running GRIDSS CollectGridssMetricsAndExtractSVReads for [% sample %] - $(date)"

extract_tmp_bam=[% dirs.tmp %]/gridss.tmp.querysorted.[% sample %].sv.bam
java -Xmx512M ${jvm_args} -cp "[% opt.GRIDSS_PATH %]/gridss.jar" \
    gridss.CollectGridssMetricsAndExtractSVReads \
    TMP_DIR= [% dirs.tmp %]\
    ASSUME_SORTED=true \
    I=[% sample_bam %] \
    O=[% working_dir %]/[% sample %] \
    THRESHOLD_COVERAGE=[% opt.GRIDSS_THRESHOLD_COVERAGE %] \
    FILE_EXTENSION=null \
    GRIDSS_PROGRAM=null \
    GRIDSS_PROGRAM=CollectCigarMetrics \
    GRIDSS_PROGRAM=CollectMapqMetrics \
    GRIDSS_PROGRAM=CollectTagMetrics \
    GRIDSS_PROGRAM=CollectIdsvMetrics \
    GRIDSS_PROGRAM=ReportThresholdCoverage \
    PROGRAM=null \
    PROGRAM=CollectInsertSizeMetrics \
    SV_OUTPUT=/dev/stdout \
    COMPRESSION_LEVEL=0 \
    METRICS_OUTPUT=[% working_dir %]/[% sample %].sv_metrics \
    INSERT_SIZE_METRICS=[% insert_size_metrics %] \
    UNMAPPED_READS=false \
    MIN_CLIP_LENGTH=5 \
    INCLUDE_DUPLICATES=true | \
        [% opt.SAMTOOLS_PATH %]/samtools sort -O bam -T [% dirs.tmp %]/[% sample %].samtools.sort.tmp. -n -l 0 -@ [% opt.GRIDSS_PREPROCESS_THREADS %] -o ${extract_tmp_bam}

echo "[INFO] Running GRIDSS ComputeSamTags for [% sample %] - $(date)"

tag_tmp_bam=[% dirs.out %]/gridss.tmp.withtags.[% sample %].sv.bam
java -Xmx[% opt.GRIDSS_PREPROCESS_MEM %]G ${jvm_args} -cp "[% opt.GRIDSS_PATH %]/gridss.jar" \
    gridss.ComputeSamTags \
    TMP_DIR=[% dirs.tmp %] \
    WORKING_DIR=[% dirs.out %] \
    REFERENCE_SEQUENCE=[% opt.REF_GENOME %] \
    COMPRESSION_LEVEL=0 \
    I=$extract_tmp_bam \
    O=/dev/stdout \
    RECALCULATE_SA_SUPPLEMENTARY=true \
    SOFTEN_HARD_CLIPS=true \
    FIX_MATE_INFORMATION=true \
    FIX_DUPLICATE_FLAG=true \
    TAGS=null \
    TAGS=NM \
    TAGS=SA \
    TAGS=R2 \
    TAGS=Q2 \
    TAGS=MC \
    TAGS=MQ \
    ASSUME_SORTED=true | \
        [% opt.SAMTOOLS_PATH %]/samtools sort -O bam -T [% dirs.out %]/[% sample %].samtools.sort.tmp. -@ [% opt.GRIDSS_PREPROCESS_THREADS %] -o ${tag_tmp_bam}

echo "[INFO] Running GRIDSS SoftClipsToSplitReads for [% sample %] - $(date)"

java -Xmx[% opt.GRIDSS_PREPROCESS_MEM %]G ${jvm_args} -cp "[% opt.GRIDSS_PATH %]/gridss.jar" \
    -Dgridss.output_to_temp_file=true \
    gridss.SoftClipsToSplitReads \
    TMP_DIR=[% dirs.tmp %] \
    WORKING_DIR=[% dirs.out %] \
    REFERENCE_SEQUENCE=[% opt.REF_GENOME %] \
    I=${tag_tmp_bam} \
    O=[% sv_bam %] \
    WORKER_THREADS=[% opt.GRIDSS_PREPROCESS_THREADS %] \
    ALIGNER_COMMAND_LINE=null \
    ALIGNER_COMMAND_LINE=[% opt.BWA_PATH %]/bwa \
    ALIGNER_COMMAND_LINE=mem \
    ALIGNER_COMMAND_LINE=-t \
    'ALIGNER_COMMAND_LINE=%3$d' \
    'ALIGNER_COMMAND_LINE=%2$s' \
    'ALIGNER_COMMAND_LINE=%1$s'

assert_not_empty [% sv_bam %]

rm -r [% dirs.out %]/gridss.tmp.withtags.[% sample %].sv.bam*

success
