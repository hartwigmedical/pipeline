#!/usr/bin/env bash
# -*- TT -*-

[% INCLUDE ErrorHandling.tt %]
[% INCLUDE Logging.tt job_name="PipelineCheck" main_step="" log_name="${opt.RUN_NAME}.log" %]

succeed=true
rm -f [% log_file %]

echo "Check and cleanup for run: [% opt.RUN_NAME %]" >> [% log_file %]
echo "Pipeline version: [% opt.VERSION %]" >> [% log_file %]
echo >> [% log_file %]

[%- FOREACH done_file IN done_files %]
echo -n "$(basename "[% done_file %]"): " >> [% log_file %]
if [ -f "[% done_file %]" ]
then
    echo "succeeded" >> [% log_file %]
else
    echo "failed" >> [% log_file %]
    succeed=false
fi
[% END -%]

echo >> [% log_file %]

if [[ "${succeed}" == "true" ]]
then
    echo "The pipeline completed successfully." >> [% log_file %]

    find [% opt.OUTPUT_DIR %] -type d -name tmp -prune -exec rm -rf "{}" \;
    find [% opt.OUTPUT_DIR %]/*/logs -size 0 -not -name "*.done" -delete
    find [% dirs.log %] -size 0 -not -name "*.done" -delete
else
    echo "One or multiple step(s) of the pipeline failed." >> [% log_file %]
fi

rm -f [% opt.OUTPUT_DIR %]/run.lock

if [[ "${succeed}" == "true" ]]
then
    # SABR: don't touch done file; it should always run
    success_no_done
fi