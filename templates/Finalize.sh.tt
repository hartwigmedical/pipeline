#!/usr/bin/env bash
# -*- TT -*-

[% INCLUDE ErrorHandling.tt %]
[% INCLUDE Logging.tt job_name="Finalize" main_step="" log_name="${opt.RUN_NAME}.log" %]

failed=false
rm -f [% log_file %]

echo "Check and cleanup for run: [% opt.RUN_NAME %]" >> [% log_file %]
echo "Pipeline version: [% opt.VERSION %]" >> [% log_file %]
echo >> [% log_file %]

[%- FOREACH done_file IN done_files %]
echo -n "$(basename "[% done_file %]"): " >> [% log_file %]
if [ -f "[% done_file %]" ]
then
    echo "succeeded" >> [% log_file %]
else
    echo "failed" >> [% log_file %]
    failed=true
fi
[% END -%]

echo >> [% log_file %]


if [[ "${failed}" == "true" ]]
then
    echo "One or multiple step(s) of the pipeline failed." >> [% log_file %]
    mail -s "Pipeline FAILED [% opt.RUN_NAME %]" "[% opt.MAIL %]" < [% log_file %]
else
    echo "The pipeline completed successfully." >> [% log_file %]
    find [% opt.OUTPUT_DIR %] -type d -name tmp -prune -exec rm -rf "{}" \;
    find [% dirs.log %] -size 0 -not -name "*.done" -delete
    find [% opt.OUTPUT_DIR %]/*/logs -size 0 -not -name "*.done" -delete

[% IF opt.SOMATIC_VARIANTS == "yes" -%]
    find [% opt.OUTPUT_DIR %]/somaticVariants/*/logs -size 0 -not -name "*.done" -delete
[% END -%]

[% IF opt.INDELREALIGNMENT == "yes" -%]
[% FOREACH sample IN opt.SAMPLES.keys -%]
    rm -f [% opt.OUTPUT_DIR %]/[% sample %]/mapping/[% sample %]_dedup.ba*
[% END -%]
[% END -%]

[% IF opt.BASEQUALITYRECAL == "yes" && opt.FINALIZE_KEEP_BQSR == "no" -%]
[% FOREACH sample IN opt.SAMPLES.keys -%]
    rm -f [% opt.OUTPUT_DIR %]/[% sample %]/mapping/[% sample %]_dedup.recalibrated.ba*
[% END -%]
[% END -%]

[% IF opt.exists('PILEUP_FILES') && opt.FINALIZE_KEEP_PILEUP == "no" -%]
[% FOREACH pileup_path IN opt.PILEUP_FILES.values -%]
    rm -f "[% pileup_path %]"
[% END -%]
[% END -%]

[% IF opt.exists('EXTRAS') -%]
    cd "[% opt.OUTPUT_DIR %]"

    # genuine failures to produce artefacts should be caught elsewhere
    # providing empty files where tools are successful but produce no
    # output prevents tar from failing, failing the pipeline
    for artefact in "[% opt.EXTRAS.join('" "') %]"
    do
        if [ ! -e "$artefact" ]
        then
            touch "$artefact"
        fi
    done

    tar -zcf "[% extras_tar %]" "[% opt.EXTRAS.join('" "') %]"
    zip -r "[% extras_zip %]" "[% opt.EXTRAS.join('" "') %]"
[% END -%]

    mail -s "Pipeline DONE [% opt.RUN_NAME %]" "[% opt.MAIL %]" < [% log_file %]
    touch "[% dirs.log %]/PipelineCheck.done"

    # finalize should not touch its own done file; it should always run
    success_no_done
fi

# regardless of success, remove the lock: we are done
rm -f [% opt.OUTPUT_DIR %]/run.lock
