#!/usr/bin/env bash
# -*- TT -*-

[% INCLUDE ErrorHandling.tt %]
[% INCLUDE Logging.tt job_name="GridssPreProcess" main_step=joint_name log_name="Gridss_${joint_name}.log" %]


# bam sample


insert_size_metrics=$run_dir/QCStats/${bam_sample}_dedup/${bam_sample}_dedup_MultipleMetrics.txt.insert_size_metrics

if [[ ! $bam.bai ]] ; then
samtools index $bam
fi

if [[ ! -f $insert_size_metrics ]] ; then
echo "Missing insert size metrics file $insert_size_metrics. Aborting" 1>&2
exit 1
fi

if [[ ! -f "$bam" ]] ; then
echo "Missing input bam $bam. Aborting" 1>&2
exit 1
fi

working_dir=$gridss_dir/$(basename $bam).gridss.working
mkdir -p $working_dir
sv_bam=$working_dir/$(basename $bam).sv.bam
extract_tmp_bam=$working_dir/gridss.tmp.querysorted.$(basename $bam).sv.bam
tag_tmp_bam=$working_dir/gridss.tmp.withtags.$(basename $bam).sv.bam
if [[ ! -f $sv_bam ]] ; then
if [[ ! -f $extract_tmp_bam ]] ; then
# Since we already have insert size metrics, we can compute metrics and extract SV reads in a single pass
echo $(date) CollectGridssMetricsAndExtractSVReads
/usr/bin/time -o ${log_prefix}.${bam_sample}.time.CollectGridssMetricsAndExtractSVReads.log java -Xmx512M $gridss_jvm_args \
gridss.CollectGridssMetricsAndExtractSVReads \
TMP_DIR=$gridss_dir \
ASSUME_SORTED=true \
I=$bam \
O=$working_dir/$(basename $bam) \
THRESHOLD_COVERAGE=$gridss_threshold_coverage \
FILE_EXTENSION=null \
GRIDSS_PROGRAM=null \
GRIDSS_PROGRAM=CollectCigarMetrics \
GRIDSS_PROGRAM=CollectMapqMetrics \
GRIDSS_PROGRAM=CollectTagMetrics \
GRIDSS_PROGRAM=CollectIdsvMetrics \
GRIDSS_PROGRAM=ReportThresholdCoverage \
PROGRAM=null \
PROGRAM=CollectInsertSizeMetrics \
SV_OUTPUT=/dev/stdout \
COMPRESSION_LEVEL=0 \
METRICS_OUTPUT=$working_dir/$(basename $bam).sv_metrics \
INSERT_SIZE_METRICS=$insert_size_metrics \
UNMAPPED_READS=false \
MIN_CLIP_LENGTH=5 \
INCLUDE_DUPLICATES=true | \
/usr/bin/time -o ${log_prefix}.${bam_sample}.time.sort.name.log \
samtools sort -O bam -T $gridss_dir/${bam_sample}.samtools.sort.tmp. -n -l 0 -@ $threads -o $extract_tmp_bam -  ||
exit 1
fi
if [[ ! -f $tag_tmp_bam ]] ; then
echo $(date) ComputeSamTags
/usr/bin/time -o ${log_prefix}.${bam_sample}.time.ComputeSamTags.log java -Xmx3G $gridss_jvm_args \
gridss.ComputeSamTags \
$gridss_common_args \
COMPRESSION_LEVEL=0 \
I=$extract_tmp_bam \
O=/dev/stdout \
RECALCULATE_SA_SUPPLEMENTARY=true \
SOFTEN_HARD_CLIPS=true \
FIX_MATE_INFORMATION=true \
FIX_DUPLICATE_FLAG=true \
TAGS=null \
TAGS=NM \
TAGS=SA \
TAGS=R2 \
TAGS=Q2 \
TAGS=MC \
TAGS=MQ \
ASSUME_SORTED=true | \
/usr/bin/time -o ${log_prefix}.${bam_sample}.time.sort.coordinate.log \
samtools sort -O bam -T $gridss_dir/${bam_sample}.samtools.sort.tmp. -@ $threads -o $tag_tmp_bam - ||
exit 1
fi
echo $(date) SoftClipsToSplitReads
/usr/bin/time -o ${log_prefix}.${bam_sample}.time.SoftClipsToSplitReads.log \
java -Xmx3G $gridss_jvm_args \
-Dgridss.output_to_temp_file=true \
gridss.SoftClipsToSplitReads \
$gridss_common_args \
I=$tag_tmp_bam \
O=${sv_bam} \
WORKER_THREADS=$threads &&
rm $tmp_bam $tag_tmp_bam
fi

# Wait for metric extraction to finish
wait

if [[ ! -f  $sv_bam ]] ; then
echo "$(date) Preprocessing failed. Missing $sv_bam " 1>&2
exit 1
else
echo "$(date) Preprocessing complete"
fi
